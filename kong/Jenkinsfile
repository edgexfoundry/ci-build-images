//
// Copyright (c) 2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

loadGlobalLibrary()

def image
def changeDetected

pipeline {
    agent {
        label 'centos7-docker-4c-2g'
    }

    stages {
        stage('LF Prep') {
            steps {
                edgeXSetupEnvironment()
                edgeXDockerLogin(settingsFile: env.MVN_SETTINGS)
                script {
                    changeDetected = edgex.didChange('^kong/')
                    println "Detected Change in Kong? ${changeDetected}"
                }
            }
        }

        stage('Build Docker Image') {
            when { expression { changeDetected } }
            steps {
                sh 'docker run --rm --privileged multiarch/qemu-user-static:register --reset'

                script {
                    docker.withRegistry("https://${env.DOCKER_REGISTRY}:10004") {
                        image = docker.build('kong-arm', "--build-arg DOCKER_REGISTRY=${env.DOCKER_REGISTRY}:10004 -f kong/Dockerfile ./kong")
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when { allOf { expression { edgex.isReleaseStream() }; expression { changeDetected } } }
            steps {
                script {
                    docker.withRegistry("https://${env.DOCKER_REGISTRY}:10004") {
                        image.push('latest')
                        image.push(env.GIT_COMMIT)
                        image.push(env.BUILD_NUMBER)
                    }
                }
            }
        }
    }

    post {
        always {
            edgeXInfraPublish()
        }
    }
}

def loadGlobalLibrary(branch = '*/master') {
    library(identifier: 'edgex-global-pipelines@master', 
        retriever: legacySCM([
            $class: 'GitSCM',
            userRemoteConfigs: [[url: 'https://github.com/edgexfoundry/edgex-global-pipelines.git']],
            branches: [[name: branch]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[
                $class: 'SubmoduleOption',
                recursiveSubmodules: true,
            ]]]
        )
    ) _
}
